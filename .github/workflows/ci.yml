name: Pipeline de CI/CD pour RAIN

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      # --- AJOUTEZ CETTE ÉTAPE ---
      - name: Free up disk space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo swapon /swapfile
          sudo fallocate -l 20G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
      # --- MODIFICATION CLÉ : On crée le fichier .env dynamiquement ---
      - name: Create .env file for Docker Compose
        run: |
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> Docker/.env
          echo "DB_USER=${{ secrets.DB_USER }}" >> Docker/.env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> Docker/.env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> Docker/.env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> Docker/.env
          echo "MONGODB_NAME=${{ secrets.MONGODB_NAME }}" >> Docker/.env
          echo "MONGODB_USER=${{ secrets.MONGODB_USER }}" >> Docker/.env
          echo "MONGODB_PASSWORD=${{ secrets.MONGODB_PASSWORD }}" >> Docker/.env
          echo "MONGODB_HOST=${{ secrets.MONGODB_HOST }}" >> Docker/.env
          echo "MONGODB_PORT=${{ secrets.MONGODB_PORT }}" >> Docker/.env
          echo "BASE_URL=${{ secrets.BASE_URL }}" >> Docker/.env
          echo "MODEL_SAVE_PATH=${{ secrets.MODEL_SAVE_PATH }}" >> Docker/.env
          echo "EMBEDDINGS_SAVE_PATH=${{ secrets.EMBEDDINGS_SAVE_PATH }}" >> Docker/.env
          echo "MODEL_EMBEDDING_NAME=${{ secrets.MODEL_EMBEDDING_NAME }}" >> Docker/.env
          echo "MLFLOW_DB_NAME=${{ secrets.MLFLOW_DB_NAME }}" >> Docker/.env
          echo "MLFLOW_TRACKING_URL=${{ secrets.MLFLOW_TRACKING_URL }}" >> Docker/.env
          echo "GRA_DOCKER_PORT=${{ secrets.GRA_DOCKER_PORT }}" >> Docker/.env
          echo "MLFLOW_DOCKER_PORT=${{ secrets.MLFLOW_DOCKER_PORT }}" >> Docker/.env
          echo "PROM_DOCKER_PORT=${{ secrets.PROM_DOCKER_PORT }}" >> Docker/.env
          echo "DB_DOCKER_PORT=${{ secrets.DB_DOCKER_PORT }}" >> Docker/.env
          echo "MONGODB_DOCKER_PORT=${{ secrets.MONGODB_DOCKER_PORT }}" >> Docker/.env
          echo "STREAMLIT_DOCKER_PORT=${{ secrets.STREAMLIT_DOCKER_PORT }}" >> Docker/.env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> Docker/.env

      - name: Build and Run Docker Compose
        # Cette étape n'a plus besoin du bloc 'env:', car docker-compose va trouver le fichier .env
        run: docker compose -f Docker/docker-compose.yml up -d --build

      - name: Wait for Services to be Healthy
        run: |
          echo "Waiting for services..."
          sleep 60 # J'augmente légèrement le temps pour être sûr que tout charge
          docker compose -f Docker/docker-compose.yml ps
          echo "Services are up!"

      - name: Run Tests
        run: docker compose -f Docker/docker-compose.yml exec -T api pytest Tests/

  push-to-registry:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GIT_TOKEN }}

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./API/Dockerfile
          push: true
          tags: ghcr.io/Kpoze/rain-api:latest

      - name: Build and push UI image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./UI/Dockerfile
          push: true
          tags: ghcr.io/Kpoze/rain-ui:latest

      - name: Build and push MLflow image
        uses: docker/build-push-action@v5
        with:
          context: ./Docker
          file: ./Docker/mlflow/Dockerfile
          push: true
          tags: ghcr.io/Kpoze/rain-mlflow:latest